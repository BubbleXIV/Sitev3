/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type ContentBlockType = "accordion" | "button" | "carousel" | "columns" | "custom_html" | "divider" | "form" | "gallery" | "heading" | "image" | "list" | "modal" | "paragraph" | "section" | "table" | "tabs" | "video";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Json = JsonValue;

export type JsonArray = JsonValue[];

export type JsonObject = {
  [x: string]: JsonValue | undefined;
};

export type JsonPrimitive = boolean | number | string | null;

export type JsonValue = JsonArray | JsonObject | JsonPrimitive;

export type PageStatus = "archived" | "draft" | "published";

export type StaffRole = "bartender" | "entertainer" | "manager" | "other" | "owner" | "security";

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export type UserRole = "admin" | "user";

export interface BookingInquiries {
  budgetRange: string | null;
  characterName: string | null;
  contactEmail: string | null;
  contactName: string;
  createdAt: Generated<Timestamp | null>;
  eventDate: Timestamp | null;
  expectedGuests: number | null;
  id: Generated<number>;
  inquiryType: string;
  message: string;
  priority: Generated<string | null>;
  server: string | null;
  staffNotes: string | null;
  status: Generated<string | null>;
  updatedAt: Generated<Timestamp | null>;
}

export interface Events {
  coverCharge: Generated<number | null>;
  createdAt: Generated<Timestamp | null>;
  currentAttendees: Generated<number | null>;
  description: string | null;
  endTime: string | null;
  eventDate: Timestamp;
  eventType: string | null;
  featuredStaffIds: number[] | null;
  id: Generated<number>;
  imageUrl: string | null;
  isActive: Generated<boolean | null>;
  maxAttendees: number | null;
  rsvpRequired: Generated<boolean | null>;
  specialRequirements: string | null;
  startTime: string | null;
  title: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface GalleryCategories {
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  displayOrder: Generated<number | null>;
  id: Generated<number>;
  isActive: Generated<boolean | null>;
  name: string;
}

export interface GalleryPhotos {
  altText: string | null;
  categoryId: number | null;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  displayOrder: Generated<number | null>;
  eventDate: Timestamp | null;
  id: Generated<number>;
  imageUrl: string;
  isActive: Generated<boolean | null>;
  isFeatured: Generated<boolean | null>;
  photographerCredit: string | null;
  title: string | null;
  updatedAt: Generated<Timestamp | null>;
}

export interface LoginAttempts {
  attemptedAt: Generated<Timestamp | null>;
  email: string;
  id: Generated<number>;
  success: Generated<boolean | null>;
}

export interface MediaLibrary {
  altText: string | null;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  filename: string;
  fileSize: number | null;
  fileType: string;
  fileUrl: string;
  id: Generated<number>;
  originalFilename: string;
  tags: string[] | null;
  uploadedBy: number | null;
}

export interface MenuItems {
  category: Generated<string | null>;
  createdAt: Generated<Timestamp | null>;
  description: string | null;
  displayOrder: Generated<number | null>;
  id: Generated<number>;
  isAvailable: Generated<boolean | null>;
  name: string;
  pictureUrl: string | null;
  priceGil: number | null;
  updatedAt: Generated<Timestamp | null>;
}

export interface NavigationItems {
  createdAt: Generated<Timestamp | null>;
  displayOrder: Generated<number | null>;
  id: Generated<number>;
  isActive: Generated<boolean | null>;
  isExternal: Generated<boolean | null>;
  label: string;
  parentId: number | null;
  target: Generated<string | null>;
  updatedAt: Generated<Timestamp | null>;
  url: string;
}

export interface PageContentBlocks {
  blockType: ContentBlockType;
  content: Generated<Json>;
  createdAt: Generated<Timestamp | null>;
  displayOrder: Generated<number | null>;
  id: Generated<number>;
  isActive: Generated<boolean | null>;
  pageId: number;
  parentBlockId: number | null;
  settings: Generated<Json | null>;
  styles: Generated<Json | null>;
  updatedAt: Generated<Timestamp | null>;
}

export interface Pages {
  createdAt: Generated<Timestamp | null>;
  createdBy: number | null;
  displayOrder: Generated<number | null>;
  id: Generated<number>;
  isHomepage: Generated<boolean | null>;
  metaDescription: string | null;
  metaKeywords: string | null;
  metaTitle: string | null;
  ogImageUrl: string | null;
  route: string;
  showInNavigation: Generated<boolean | null>;
  status: Generated<PageStatus | null>;
  title: string;
  updatedAt: Generated<Timestamp | null>;
  updatedBy: number | null;
}

export interface Performances {
  createdAt: Generated<Timestamp | null>;
  dayOfWeek: number | null;
  description: string | null;
  endTime: string;
  id: Generated<number>;
  isActive: Generated<boolean | null>;
  recurring: Generated<boolean | null>;
  specialNotes: string | null;
  staffId: number | null;
  startTime: string;
  title: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface Sessions {
  createdAt: Generated<Timestamp | null>;
  expiresAt: Timestamp;
  id: string;
  lastAccessed: Generated<Timestamp | null>;
  userId: number;
}

export interface SiteSettings {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  settingKey: string;
  settingValue: string | null;
  updatedAt: Generated<Timestamp | null>;
}

export interface Staff {
  bio: string | null;
  createdAt: Generated<Timestamp | null>;
  displayOrder: Generated<number | null>;
  id: Generated<number>;
  isActive: Generated<boolean | null>;
  name: string;
  profilePictureUrl: string | null;
  role: Generated<StaffRole>;
  updatedAt: Generated<Timestamp | null>;
}

export interface StaffAlts {
  altOrder: Generated<number | null>;
  bio: string | null;
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  name: string;
  profilePictureUrl: string | null;
  role: Generated<StaffRole>;
  staffId: number;
}

export interface UserPasswords {
  createdAt: Generated<Timestamp | null>;
  id: Generated<number>;
  passwordHash: string;
  userId: number;
}

export interface Users {
  avatarUrl: string | null;
  createdAt: Generated<Timestamp | null>;
  displayName: string;
  email: string;
  id: Generated<number>;
  role: Generated<UserRole>;
  updatedAt: Generated<Timestamp | null>;
}

export interface DB {
  bookingInquiries: BookingInquiries;
  events: Events;
  galleryCategories: GalleryCategories;
  galleryPhotos: GalleryPhotos;
  loginAttempts: LoginAttempts;
  mediaLibrary: MediaLibrary;
  menuItems: MenuItems;
  navigationItems: NavigationItems;
  pageContentBlocks: PageContentBlocks;
  pages: Pages;
  performances: Performances;
  sessions: Sessions;
  siteSettings: SiteSettings;
  staff: Staff;
  staffAlts: StaffAlts;
  userPasswords: UserPasswords;
  users: Users;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const UserRoleArrayValues: [UserRole, ...UserRole[]] = ["admin","user"];
export const StaffRoleArrayValues: [StaffRole, ...StaffRole[]] = ["bartender","entertainer","manager","other","owner","security"];
export const PageStatusArrayValues: [PageStatus, ...PageStatus[]] = ["archived","draft","published"];
export const ContentBlockTypeArrayValues: [ContentBlockType, ...ContentBlockType[]] = ["accordion","button","carousel","columns","custom_html","divider","form","gallery","heading","image","list","modal","paragraph","section","table","tabs","video"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.